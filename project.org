* simple-gl

** About
A high level library for using OpenGL.

** Overview

This is a minimalist, modern OpenGL library based on GLFW.  It provides a framework for working
with shaders, buffers, textures, and user input.  The goal is to be a "playground" for OpenGL
development and make it easy to prototype OpenGL code.

The smallest possible example, showing how to create a window with two instanced triangles (ESC to exit):
   #+begin_src lisp
     (ql:quickload :simple-gl)
     (sgl:display-in (make-instance 'sgl:instanced-opengl-object) (make-instance 'sgl:viewer))
   #+end_src
   #+RESULTS:

To create more complicated graphics, create a subclass of `opengl-object`, or `instanced-opengl-object` and overload the 'initialize-buffers' method.

#+begin_src lisp
  (defclass my-gl-object (sgl:opengl-object)
    ((sgl:primitive-type :initform :lines)))

  (defmethod sgl:initialize-uniforms ((object my-gl-object) &key)
    (call-next-method)
    ;; Initialize uniforms
    )
  (defmethod sgl:initialize-buffers ((object instanced-my-gl-object) &key)j
    (call-next-method)
    ;; Calls to (add-buffer ...)
    )
  (defmethod sgl:cleanup ((object my-gl-object))
    (call-next-method)
    ;; Cleanup any OpenGL resources
    )
#+end_src

** protocol-refactor Branch

*** Purpose

The purpose of this branch is to refactor the library so that it puts more
emphasis on OpenGL state management, and define exactly when methods like
"initialize-buffers" are called, and exactly what their responsibilities are.
Specifically I want to focus on updating state, because that's a pain point right now, for things like
buffers during animation.

I'd also like to refactor the (display viewer) method to better handle operations that require doing things in the OpenGL thread.


*** Example REPL code
This is an example of how it will be used from a REPL:

#+begin_src lisp
  (ql:quickload '(:spacenav :simple-gl :sgl-automata :sgl-blend2d-texture))
  (defparameter *viewer* (make-instance 'sgl:3d-viewer))
  (sgl:add-object *viewer*
                  :cube (make-instance
                         'sgl:stl-file
                         :file-name "/home/jeremiah/data/3d-models/cube.stl"))
  (sgl:add-object *viewer*
                  :hashlife (sgl-automata:create-hashlife "CYCLTRON.LIF"))
  (sgl:add-object *viewer*
                  :textured (sgl-blend2d-texture:blend2d-quad 2048))
  (sgl:display *viewer*)
#+end_src

#+RESULTS:
: #<SIMPLE-TASKS:CALL-TASK :FUNC #<FUNCTION (LAMBDA () :IN SIMPLE-GL:DISPLAY) {1035F4ACCB}> :STATUS :SCHEDULED {1035750CC3}>




* TODO Items
** TODO Split APIs for allocating, binding, filling, and refilling objects
** TODO Better document API and library usage
** TODO Create 3d mouse navigation viewer that moves through the world using vector directions
** TODO Refactor glfw out of viewer base class and into glfw-viewer
** TODO offscreen-viewer classes
** TODO Make rebuilding styles safer.  Right now, rebuilding with a syntax error causes a crash.
** DONE Add mutex to viewer class
** DONE Remove add-viewer, rm-viewer, find-viewer, etc.
** DONE Add display method that runs in the main thread and displays the viewer
** DONE Add methods and functions that lock viewer's mutex and manipulate viewer state (from any thread).


** License
ISC


Copyright (c) 2022 Jeremiah LaRocco <jeremiah_larocco@fastmail.com>




